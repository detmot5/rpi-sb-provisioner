<%inc
#include <string>
#include <vector>
#include <json/json.h>
%>

<%c++
auto scripts = @@.get<Json::Value>("scripts");
auto provisioners = @@.get<std::vector<std::string>>("provisioners");
auto stages = @@.get<std::vector<std::string>>("stages");
std::string currentPage = "customisation";
%>

<!DOCTYPE html>
<html>
<head>
    <title>Customisation Scripts</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <%view stylesheet %>
    <style>
        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 15px;
        }
        
        .mt-4 {
            margin-top: 1.5rem;
        }

/* Tab styling without relying on Bootstrap */
.tabs {
  margin-top: 20px;
}

.tab-buttons {
  display: flex;
  flex-wrap: wrap;
  border-bottom: 2px solid #ccc;
  margin-bottom: 20px;
}

.tab-button {
  background: #e0e0e0;
  border: 1px solid #ccc;
  border-bottom: none;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  padding: 10px 15px;
  margin-right: 5px;
  margin-bottom: 0;
  cursor: pointer;
  position: relative;
  top: 2px;
  color: #555;
  font-weight: 500;
  font-size: 16px;
}

.tab-button.active {
  background: #fff;
  border: 1px solid #ccc;
  border-bottom: 2px solid white;
  color: #222;
  font-weight: 600;
  z-index: 1;
}

.tab-button:hover:not(.active) {
  background: #eaeaea;
}

.tab-content {
  display: none;
}

.tab-content.active {
  display: block;
}

/* Scoped styles for customisation scripts page */
.hook-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-gap: 20px;
  margin-top: 20px;
}

.hook-card {
  border: 1px solid #ddd;
  border-radius: 6px;
  padding: 15px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
  background-color: #fff;
  transition: box-shadow 0.2s ease-in-out;
}

.hook-card:hover {
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.hook-card h4 {
  margin-top: 0;
  margin-bottom: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 16px;
  color: #333;
}

.hook-status {
  display: inline-block;
  border-radius: 4px;
  padding: 3px 8px;
  font-size: 12px;
  font-weight: 600;
  margin-left: 10px;
}

.hook-enabled {
  background-color: #d4edda;
  color: #155724;
}

.hook-disabled {
  background-color: #f8d7da;
  color: #721c24;
}

.hook-missing {
  background-color: #e2e3e5;
  color: #41464b;
}

.hook-description {
  margin-bottom: 15px;
  font-size: 14px;
  line-height: 1.5;
  color: #555;
}

.hook-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 15px;
}

/* Custom buttons without Bootstrap */
.cust-btn {
  display: inline-block;
  font-weight: 500;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: 1px solid transparent;
  padding: 0.375rem 0.75rem;
  font-size: 0.9rem;
  line-height: 1.5;
  border-radius: 0.25rem;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
  text-decoration: none;
  cursor: pointer;
}

.cust-btn-sm {
  padding: 0.25rem 0.5rem;
  font-size: 0.875rem;
  line-height: 1.5;
  border-radius: 0.2rem;
}

.cust-btn-primary {
  color: #fff;
  background-color: #007bff;
  border-color: #007bff;
}

.cust-btn-primary:hover {
  color: #fff;
  background-color: #0069d9;
  border-color: #0062cc;
}

.cust-btn-success {
  color: #fff;
  background-color: #28a745;
  border-color: #28a745;
}

.cust-btn-success:hover {
  color: #fff;
  background-color: #218838;
  border-color: #1e7e34;
}

.cust-btn-warning {
  color: #212529;
  background-color: #ffc107;
  border-color: #ffc107;
}

.cust-btn-warning:hover {
  color: #212529;
  background-color: #e0a800;
  border-color: #d39e00;
}

.cust-btn-danger {
  color: #fff;
  background-color: #dc3545;
  border-color: #dc3545;
}

.cust-btn-danger:hover {
  color: #fff;
  background-color: #c82333;
  border-color: #bd2130;
}

.debug-info {
  display: none;
  margin-top: 20px;
  padding: 10px;
  background-color: #f8f9fa;
  border: 1px solid #ddd;
  border-radius: 5px;
}
    </style>
</head>
<body>
    <%view navbar %>
    
    <div class="container mt-4">
        <div class="customisation-container">
          <h1>Customisation Scripts</h1>
          <p>Create and manage scripts that run at different stages during provisioning.</p>
          
          <div class="tabs">
            <div class="tab-buttons">
              <%c++ for (const auto& provisioner : provisioners) { %>
                <button class="tab-button" onclick="openTab(event, '<%c++ $$ << provisioner; %>')" id="<%c++ $$ << provisioner; %>-tab">
                  <%c++ $$ << provisioner; %>
                </button>
              <%c++ } %>
            </div>
            
            <%c++ for (const auto& provisioner : provisioners) { %>
              <div id="<%c++ $$ << provisioner; %>" class="tab-content">
                <h3><%c++ $$ << provisioner; %> scripts</h3>
                
                <div class="hook-grid">
                  <%c++ for (const auto& stage : stages) { %>
                    <%c++ 
                      std::string hookFilename = provisioner + "-" + stage + ".sh";
                      bool hookExists = false;
                      bool hookEnabled = false;
                      std::string hookDescription = "";
                      
                      // Find this hook in the scripts data
                      for (int i = 0; i < scripts.size(); i++) {
                        if (scripts[i]["filename"].asString() == hookFilename) {
                          hookExists = scripts[i].isMember("exists") ? scripts[i]["exists"].asBool() : true;
                          hookEnabled = scripts[i]["enabled"].asBool();
                          if (scripts[i].isMember("description")) {
                            hookDescription = scripts[i]["description"].asString();
                          }
                          break;
                        }
                      }
                    %>
                    
                    <div class="hook-card" data-filename="<%c++ $$ << hookFilename; %>">
                      <h4>
                        <%c++ $$ << stage; %>
                        <%c++ if (hookExists && hookEnabled) { %>
                          <span class="hook-status hook-enabled">Enabled</span>
                        <%c++ } else if (hookExists && !hookEnabled) { %>
                          <span class="hook-status hook-disabled">Disabled</span>
                        <%c++ } else { %>
                          <span class="hook-status hook-missing">Not Created</span>
                        <%c++ } %>
                      </h4>
                      
                      <div class="hook-description">
                        <%c++ $$ << hookDescription; %>
                      </div>
                      
                      <div class="hook-actions">
                        <%c++ if (hookExists) { %>
                          <a href="/customisation/get-script?script=<%c++ $$ << hookFilename; %>" class="cust-btn cust-btn-primary cust-btn-sm">Edit</a>
                          
                          <%c++ if (hookEnabled) { %>
                            <button onclick="disableScript('<%c++ $$ << hookFilename; %>')" class="cust-btn cust-btn-warning cust-btn-sm">Disable</button>
                          <%c++ } else { %>
                            <button onclick="enableScript('<%c++ $$ << hookFilename; %>')" class="cust-btn cust-btn-success cust-btn-sm">Enable</button>
                          <%c++ } %>
                          
                          <button onclick="deleteScript('<%c++ $$ << hookFilename; %>')" class="cust-btn cust-btn-danger cust-btn-sm">Delete</button>
                        <%c++ } else { %>
                          <a href="/customisation/get-script?script=<%c++ $$ << hookFilename; %>" class="cust-btn cust-btn-success cust-btn-sm">Create Script</a>
                        <%c++ } %>
                      </div>
                    </div>
                  <%c++ } %>
                </div>
              </div>
            <%c++ } %>
          </div>
          
          <!-- Hidden debug info (toggle with Ctrl+Shift+D) -->
          <div id="debugInfo" class="debug-info">
            <h4>Debug Information</h4>
            <pre id="scriptsData"></pre>
          </div>
        </div>
    </div>

<script>
// Wrap all JavaScript in an IIFE to avoid global namespace pollution
(function() {
  // Debug helper - press Ctrl+Shift+D to show/hide debug info
  document.addEventListener('keydown', function(e) {
    if (e.ctrlKey && e.shiftKey && e.key === 'D') {
      var debugInfo = document.getElementById('debugInfo');
      debugInfo.style.display = debugInfo.style.display === 'none' ? 'block' : 'none';
    }
  });
  
  // Populate debug data
  document.addEventListener('DOMContentLoaded', function() {
    var scriptsData = <%c++ $$ << scripts.toStyledString(); %>;
    document.getElementById('scriptsData').textContent = JSON.stringify(scriptsData, null, 2);
    
    // Activate the first tab by default
    var firstTabButton = document.querySelector('.tab-button');
    if (firstTabButton) {
      firstTabButton.click();
    }
  });
})();

function openTab(evt, tabName) {
  console.log("Opening tab: " + tabName);
  
  // Hide all tab content
  var tabContents = document.querySelectorAll('.tab-content');
  for (var i = 0; i < tabContents.length; i++) {
    tabContents[i].classList.remove("active");
  }
  
  // Deactivate all tab buttons
  var tabButtons = document.querySelectorAll('.tab-button');
  for (var i = 0; i < tabButtons.length; i++) {
    tabButtons[i].classList.remove("active");
  }
  
  // Show the current tab and activate the button
  document.getElementById(tabName).classList.add("active");
  evt.currentTarget.classList.add("active");
}

function enableScript(filename) {
  fetch('/customisation/enable-script?script=' + encodeURIComponent(filename), {
    method: 'GET'
  })
  .then(response => {
    if (response.ok) {
      window.location.reload();
    } else {
      alert('Failed to enable script');
    }
  });
}

function disableScript(filename) {
  fetch('/customisation/disable-script?script=' + encodeURIComponent(filename), {
    method: 'GET'
  })
  .then(response => {
    if (response.ok) {
      window.location.reload();
    } else {
      alert('Failed to disable script');
    }
  });
}

function deleteScript(filename) {
  if (confirm('Are you sure you want to delete this script?')) {
    fetch('/customisation/delete-script?script=' + encodeURIComponent(filename), {
      method: 'GET'
    })
    .then(response => {
      if (response.ok) {
        window.location.reload();
      } else {
        alert('Failed to delete script');
      }
    });
  }
}
</script>
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
</body>
</html> 