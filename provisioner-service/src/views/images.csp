<!DOCTYPE html>
<html>
<head>
    <title>System Images</title>
    <%view stylesheet %>
    <script>
        // WebSocket connection
        let ws = null;
        let pendingSha256Requests = new Set();

        function showMessage(message, isError = false) {
            const messageDiv = document.getElementById(isError ? 'error-message' : 'success-message');
            messageDiv.textContent = message;
            messageDiv.style.display = 'block';
            setTimeout(() => {
                messageDiv.style.display = 'none';
            }, 3000);
        }

        async function useImage(name) {
            if (!confirm('Are you sure you want to use this image as the gold master?')) {
                return;
            }

            try {
                const response = await fetch('/options/set', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        "GOLD_MASTER_OS_FILE": "/srv/rpi-sb-provisioner/images/" + name
                    })
                });

                if (response.ok) {
                    showMessage('Gold master image updated successfully');
                    location.reload();
                } else {
                    showMessage('Failed to update gold master image', true);
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Failed to update gold master image', true);
            }
        }

        async function deleteImage(name) {
            if (!confirm('Are you sure you want to delete this image?')) {
                return;
            }

            try {
                const response = await fetch(`/delete-image?name=${encodeURIComponent(name)}`, {
                    method: 'POST'
                });

                if (response.ok) {
                    showMessage('Image deleted successfully');
                    location.reload();
                } else {
                    showMessage('Failed to delete image', true);
                }
            } catch (error) {
                console.error('Error:', error);
                showMessage('Failed to delete image', true);
            }
        }
        
        // Initialize WebSocket connection
        function initWebSocket() {
            // Check if WebSockets are supported
            if (!window.WebSocket) {
                console.error('WebSockets not supported');
                return;
            }
            
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/ws/sha256`;
            
            ws = new WebSocket(wsUrl);
            
            ws.onopen = function() {
                console.log('WebSocket connection established');
                initializeSha256Requests();
            };
            
            ws.onmessage = function(event) {
                try {
                    const response = JSON.parse(event.data);
                    if (response.image_name && pendingSha256Requests.has(response.image_name)) {
                        const sha256Cell = document.querySelector(`.sha256-cell[data-image="${response.image_name}"]`);
                        if (sha256Cell) {
                            if (response.status === 'complete') {
                                sha256Cell.textContent = response.sha256;
                                pendingSha256Requests.delete(response.image_name);
                            } else if (response.status === 'error') {
                                sha256Cell.textContent = 'Error: ' + (response.error || 'Unknown error');
                                pendingSha256Requests.delete(response.image_name);
                            } else if (response.status === 'pending' && sha256Cell.textContent === 'use-websocket') {
                                sha256Cell.textContent = 'Calculating...';
                            }
                        }
                    }
                } catch (e) {
                    console.error('Error parsing WebSocket message:', e);
                }
            };
            
            ws.onerror = function(error) {
                console.error('WebSocket error:', error);
            };
            
            ws.onclose = function() {
                console.log('WebSocket connection closed');
                // Try to reconnect after a delay
                setTimeout(initWebSocket, 5000);
            };
        }
        
        // Send SHA256 calculation request via WebSocket
        function requestSha256(imageName) {
            if (!ws || ws.readyState !== WebSocket.OPEN) {
                setTimeout(() => requestSha256(imageName), 1000);
                return;
            }
            
            pendingSha256Requests.add(imageName);
            ws.send(JSON.stringify({
                action: 'get_sha256',
                image_name: imageName
            }));
        }
        
        // Initialize SHA256 requests for all images
        function initializeSha256Requests() {
            const sha256Cells = document.querySelectorAll('.sha256-cell');
            sha256Cells.forEach(cell => {
                const imageName = cell.dataset.image;
                if (cell.textContent === 'use-websocket') {
                    cell.textContent = 'Connecting...';
                    requestSha256(imageName);
                }
            });
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            initWebSocket();
        });

        // Cleanup when navigating away
        window.addEventListener('beforeunload', () => {
            if (ws) {
                ws.close();
            }
        });
    </script>
</head>
<body>
    <%view navbar %>

    <h1>System Images</h1>

    <div id="success-message" class="success-message"></div>
    <div id="error-message" class="error-message"></div>

    <div class="upload-section">
        <h2>Upload New Image</h2>
        <form class="upload-form" id="uploadForm" enctype="multipart/form-data">
            <div class="upload-row">
                <input type="file" name="image" required>
                <div class="progress-container" style="display: none;">
                    <div class="progress-bar">
                        <div class="progress-fill"></div>
                    </div>
                    <div class="progress-text">0%</div>
                </div>
                <button type="submit" id="uploadButton">Upload</button>
                <button type="button" id="cancelButton" style="display: none;">Cancel</button>
            </div>
        </form>
    </div>

    <table class="image-list">
        <thead>
            <tr>
                <th>Image Name</th>
                <th>SHA256</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <%c++
            auto images = @@.get<std::vector<std::map<std::string, std::string>>>("images");
            for(const auto& image : images) {
            %>
                <tr class="<%c++ $$ << (image.at("is_gold_master") == "true" ? "gold-master" : ""); %>">
                    <td><%c++ $$ << image.at("name"); %></td>
                    <td class="sha256-cell" data-image="<%c++ $$ << image.at("name"); %>"><%c++ $$ << image.at("sha256"); %></td>
                    <td><%c++ $$ << (image.at("is_gold_master") == "true" ? "Current Gold Master" : ""); %></td>
                    <td>
                        <button class="use-btn" onclick="useImage('<%c++ $$ << image.at("name"); %>')">Use</button>
                        <button class="delete-btn" onclick="deleteImage('<%c++ $$ << image.at("name"); %>')">Delete</button>
                    </td>
                </tr>
            <%c++ } %>
        </tbody>
    </table>

    <style>
        .gold-master {
            background-color: #e6ffe6;
        }
        .use-btn, .delete-btn {
            min-width: 80px;
            padding: 8px 16px;
            margin-right: 5px;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
            font-weight: 500;
        }
        .use-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
        }
        .use-btn:hover {
            background-color: #45a049;
        }
        .delete-btn {
            background-color: #f44336;
            color: white;
            border: none;
        }
        .delete-btn:hover {
            background-color: #da190b;
        }
        .upload-form {
            width: 100%;
        }
        .upload-row {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        .progress-container {
            flex: 1;
            min-width: 200px;
            max-width: 300px;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #f0f0f0;
            border-radius: 10px;
            overflow: hidden;
        }
        .progress-fill {
            width: 0%;
            height: 100%;
            background-color: #4CAF50;
            transition: width 0.3s ease-in-out;
        }
        .progress-text {
            text-align: center;
            margin-top: 5px;
            font-size: 14px;
            color: #666;
            min-height: 1.2em; /* Prevent layout shift when text changes */
        }
        #uploadButton, #cancelButton {
            min-width: 80px;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
            font-weight: 500;
            border: none;
        }
        #uploadButton {
            background-color: #4CAF50;
            color: white;
        }
        #uploadButton:hover {
            background-color: #45a049;
        }
        #cancelButton {
            background-color: #f44336;
            color: white;
        }
        #cancelButton:hover {
            background-color: #da190b;
        }
    </style>

    <script>
        // Handle image upload with progress
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('uploadForm');
            const uploadButton = document.getElementById('uploadButton');
            const cancelButton = document.getElementById('cancelButton');
            const progressContainer = document.querySelector('.progress-container');
            const progressFill = document.querySelector('.progress-fill');
            const progressText = document.querySelector('.progress-text');
            let controller;

            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const fileInput = form.querySelector('input[type="file"]');
                if (!fileInput.files.length) {
                    showMessage('Please select a file to upload', true);
                    return;
                }
                
                const file = fileInput.files[0];
                const formData = new FormData();
                formData.append('image', file);
                
                // Show progress UI
                uploadButton.style.display = 'none';
                cancelButton.style.display = 'inline-block';
                progressContainer.style.display = 'block';
                progressFill.style.width = '0%';
                progressText.textContent = '0%';
                
                controller = new AbortController();
                
                try {
                    const response = await fetch('/upload-image', {
                        method: 'POST',
                        body: formData,
                        signal: controller.signal,
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        showMessage('Image uploaded successfully');
                        
                        // Add the uploaded image to the table
                        const tbody = document.querySelector('.image-list tbody');
                        const newRow = document.createElement('tr');
                        
                        newRow.innerHTML = `
                            <td>${data.filename}</td>
                            <td class="sha256-cell" data-image="${data.filename}">Connecting...</td>
                            <td></td>
                            <td>
                                <button class="use-btn" onclick="useImage('${data.filename}')">Use</button>
                                <button class="delete-btn" onclick="deleteImage('${data.filename}')">Delete</button>
                            </td>
                        `;
                        
                        tbody.appendChild(newRow);
                        
                        // Request SHA256 for the new image
                        requestSha256(data.filename);
                    } else {
                        const errorData = await response.json();
                        showMessage(`Upload failed: ${errorData.message || 'Unknown error'}`, true);
                    }
                } catch (error) {
                    if (error.name !== 'AbortError') {
                        showMessage(`Upload failed: ${error.message}`, true);
                    }
                } finally {
                    // Reset the form
                    form.reset();
                    uploadButton.style.display = 'inline-block';
                    cancelButton.style.display = 'none';
                    progressContainer.style.display = 'none';
                    controller = null;
                }
            });
            
            cancelButton.addEventListener('click', () => {
                if (controller) {
                    controller.abort();
                    controller = null;
                    
                    // Reset the form
                    form.reset();
                    uploadButton.style.display = 'inline-block';
                    cancelButton.style.display = 'none';
                    progressContainer.style.display = 'none';
                    
                    showMessage('Upload cancelled');
                }
            });
        });
    </script>
</body>
</html> 